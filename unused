#!/bin/sh

# Usage:
#
#     ╭─ Zsh ─────────────────────────────────────────────────────────────────────────────────╮
#     │  $ unused [options] <directory-path>                                                  │
#     ╰───────────────────────────────────────────────────────────────────────────────────────╯
#
# Options:
#     -f, --ignore-files '<file-name> ...': exclude the files
#     -d, --ignore-dirs '<dir-name> ...': exclude the dirs
#
# Examples:
#
#     ╭─ Zsh ─────────────────────────────────────────────────────────────────────────────────╮
#     │  $ unused -f "index.svelte app.d.ts" ./src                                            │
#     │  $ unused -d "routes lib" ./src                                                       │
#     ╰───────────────────────────────────────────────────────────────────────────────────────╯


RED="\033[0;31m"
YELLOW="\033[1;33m"
NO_COLOR="\033[0m"
CONFIRM=true
DELETE=true
DELIMITER="'"
TARGET_EXTENSIONS=(".jsx" ".tsx" ".astro" ".svelte" ".vue")
IGNORE_DIRS=("pages")
IGNORE_FILES=()

usingModulePaths=()
targetFilePaths=()
unusedModulePaths=()

while [ $# -gt 0 ]; do
  case "$1" in
    -f|--ignore-files)
      shift
      excludeFiles="$1"
      ;;
    -d|--ignore-dirs)
      shift
      excludeDirs="$1"
      ;;
    *)
    # if no option, assume it is the directory path
    if [ -z "$directoryPath" ]; then
      directoryPath="$1"
    else
      echo "Invalid option: $1"
      exit 1
    fi
    ;;
  esac
  shift
done

IGNORE_DIRS+=($excludeDirs)
IGNORE_FILES+=($excludeFiles)

moduleNameRetriver='
/^(\t| ){1,}import.+from/ {
  split($0, splited_line, "'$DELIMITER'");
  module_path = splited_line[2];

  split(module_path, splited_module_path, "/");
  splited_module_path_length = length(splited_module_path);

  print(splited_module_path[splited_module_path_length]);
}
'

splitter='
{
  split($1, arr, "/");
  arr_length = length(arr);
  print(arr[arr_length]);
}
'

replacer='
{
  split($0, array, file_name);
  printf(array[1]);
}
'

# Confirmation regarding delete option
if [ "$DELETE" = true ]; then
  echo "Are you sure you want to delete the unused files?"
  echo "Type 'yes' to continue: "
  read answer
  if [ "$answer" != "yes" ]; then
    echo "Aborting..."
      exit 1
  fi
fi

for filePath in `find $directoryPath -type f`; do
  fileName=$(echo $filePath | awk "$splitter")
  fileExtension=${fileName##*.}
  fileNameWithoutExtension=${fileName%.*}

  # If the file is not in the target extensions, skip it
  if ! [[ "${TARGET_EXTENSIONS[@]}" =~ "$fileExtension" ]]; then
    continue
  fi

  targetFilePaths+=($fileNameWithoutExtension)
  usingModuleName=$(awk "$moduleNameRetriver" $filePath)
  usingModulePaths+=($usingModuleName)
done

# Remove duplicates
usingModulePaths=($(echo "${usingModulePaths[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

# Store unmatched modules in array
for targetFilePath in ${targetFilePaths[@]}; do
  if [[ ! ${usingModulePaths[@]} =~ $targetFilePath ]]; then
    unusedModulePaths+=($targetFilePath)
  fi
done

# Remove duplicates
unusedModulePaths=($(echo "${unusedModulePaths[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

# Output absolute paths of unused modules to file
for filePath in `find $directoryPath -type f`; do
  fileName=$(echo $filePath | awk "$splitter")
  fileNameWithoutExtension=${fileName%.*}

  # Ignore the target directory
  for ignoreDirectory in ${IGNORE_DIRS[@]}; do
    if [[ "$filePath" == *${ignoreDirectory}* ]]; then
      echo $YELLOW"Skip: $filePath"$NO_COLOR
      continue 2
    fi
  done

  # Ignore defined target files
  if [[ ${IGNORE_FILES[@]} =~ $fileName ]]; then
    continue
  fi

  # If the file is in the unused list, delete it
  for unusedModulePath in ${unusedModulePaths[@]}; do
    if [[ $fileNameWithoutExtension == $unusedModulePath ]]; then
      coloredFileName="${RED}$fileName${NO_COLOR}"
      filePathWithoutLastChild=$(echo "$filePath" | awk -v file_name=$fileName "$replacer")
      if [ "$DELETE" = true ]; then
        if [ "$CONFIRM" = true ]; then
          clear
          echo "Are you sure you want to delete \n\n\t$filePathWithoutLastChild$coloredFileName?\n"
          echo "Type 'y' to continue: "
          read answer
          if [ "$answer" = "y" ]; then
            rm $filePath
          fi
        else
          rm $filePath
        fi
      fi
    fi
  done
done
